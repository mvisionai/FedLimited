import matplotlib.pyplot as plt
import  pandas as pd
import numpy as np
import seaborn as sns
from matplotlib import rcParams
from matplotlib.pyplot import figure
rcParams['font.family'] = 'Times New Roman'
rcParams['mathtext.default']='regular'
from matplotlib import rcParams
import  matplotlib.ticker as ticker
from matplotlib.pyplot import figure
rcParams['font.family'] = 'Times New Roman'
rcParams['mathtext.default']='regular'


left = 0.167
bottom= 0.18
right=0.97
top=0.95
marker_size = 11
markerwidth = 2.4  # 2
line_width = 2
legend_size = 18.5
xylabel_size=24
xytick_font_size =24
fig, ax = plt.subplots(figsize=(5.8, 5.1))   #7, 5.1
plt.subplots_adjust(left=left, bottom=bottom, right=right, top=top)
y_ticks_label = "Client C"
x_ticks_label = "Accuracy(%)"


x_ticks = [0, 10, 20, 30, 40]

avg_10 = [
[93.50, 82.38 , 60.81 , 55.63  , 68.30 , 56.76 , 67.63 , 51.20 , 52.60,  73.70,  82.20,  78.90],
[83.60 , 63.50 , 79.53 , 80.05 , 81.61 , 81.61 , 83.32 , 83.10 , 82.90,  75.20,  65.50,  67.90],
[99.20 , 97.05 , 98.40 , 97.13 , 99.81 , 99.72 , 99.62 , 97.20 , 92.25,  89.95,  98.70,  98.60],
[99.30 , 97.50 , 87.76 , 95.37 , 99.46 , 99.65 , 99.66 , 99.50 , 96.10,  96.40,  98.50,  94.50],
[97.83 , 87.44 , 90.00 , 46.29 , 83.75 , 78.07 , 90.58 , 87.90 , 58.50,  63.70,  81.80,  51.40],
[95.26 , 82.41 , 7.00 , 5.00 ,  38.55 , 24.31  , 64.71 , 83.10 , 35.60,  89.70,  21.30,  45.10],
[99.83 , 99.00 , 99.81 , 86.04 , 99.70 , 99.72 , 99.71 , 94.44 , 55.80,  98.70,  99.00,  95.88]
]
avg_10 = np.mean(avg_10,axis=0)


avg_15 = [
[93.39 , 80.30 , 60.92 , 37.26 , 67.53 , 60.34, 66.61 , 57.80 , 56.80,   72.20,  80.00,  75.20],
[83.35 , 64.20 , 78.93 , 71.86 , 80.20 , 77.41 , 83.30 , 78.10 , 83.00,  74.73,  64.13,  68.33],
[99.35 , 97.80 , 98.30 , 96.12 , 99.77 , 99.67 , 99.55 , 96.40 , 92.25,  90.40,  98.53,  96.66],
[99.17 , 97.0 , 87.13 , 99.27 , 99.31 , 99.41 , 99.66 , 99.70 , 95.58,   96.40,  98.06,  91.93],
[97.51 , 83.99 , 88.46 , 29.25 , 89.86 , 85.11 , 90.08 , 89.10 , 77.10,  58.33,  76.20,  45.06],
[96.17 , 77.80 , 2.00 , 5.00 , 49.57 , 22.97 , 58.29 , 87.50 , 37.90,    89.20,  17.06,  37.60],
[99.84 , 98.93 , 99.81 , 57.57 , 99.77 , 99.79, 99.66 , 92.60 , 51.90,   98.0,   99.00,  94.00]
]
avg_15 = np.mean(avg_15,axis=0)

avg_20 =[
[93.30 , 78.31 , 61.76 , 40.46 , 67.51 , 59.30 , 66.29 , 49.00 , 57.00, 71.80,  78.55,  72.10],
[84.17 , 64.10 , 75.16 , 81.31 , 80.09 , 75.44 , 83.03 , 79.60 , 83.33, 74.25,  63.15,  63.75],
[99.30 , 98.20 , 97.97 , 98.24 , 99.75 , 99.58 , 99.50 , 96.90 , 92.25, 90.40,  98.20,  95.85],
[99.23 , 95.00 , 86.70 , 99.36 , 99.41 , 99.41 , 99.66 , 99.50 , 96.30, 96.30,  97.50,  91.95],
[97.70 , 82.80 , 78.86 , 49.89 , 83.03 , 72.68 , 86.05 , 89.70 , 71.28, 58.95,  72.85,  37.45],
[95.75 , 72.11 , 5.00 , 0.25  , 50.86 , 32.44 , 59.49 , 76.66 , 36.70,  82.65,  16.30,  34.00],
[99.85 , 98.78 , 99.81 , 72.37 , 99.74 , 99.55 , 99.51 , 88.88 , 55.50,  98.0,  99.00,  95.25]
]
avg_20 = np.mean(avg_20,axis=0)

avg_25 =[
[93.41 , 76.68 , 61.04 , 38.64 , 67.70 , 59.94, 65.32 , 54.00 , 59.00, 70.60,  77.04,  70.00],
[83.75 , 64.63 , 73.59 , 69.19 , 79.06 , 77.44, 83.38 , 77.80 , 83.33,  74.0,   62.24,  63.12],
[99.40 , 98.60 , 97.90 , 98.29 , 99.70 , 99.51, 99.53 , 96.70 , 92.25, 90.72,   98.0,   96.28],
[99.37 , 96.25 , 86.01 , 99.51 , 99.31 , 99.41, 99.66 , 99.70 , 96.10, 96.36,   97.0,   91.40],
[97.62 , 76.45 , 82.74 , 45.50 , 90.00 , 78.89, 85.62 , 91.10 , 77.10, 50.52,  69.28,  40.68],
[93.55 , 68.92 , 1.00 , 9.80 , 56.17 , 51.66, 57.05 , 89.60 , 24.10,   80.96,  14.56,  47.68],
[99.84 , 98.74 , 99.81 , 98.53 , 99.78 , 99.65, 99.72 , 89.00 , 52.22, 97.96,  99.00,  94.72]
]
avg_25 = np.mean(avg_25,axis=0)

avg_30 =[
[93.21 , 75.87 , 61.66 , 42.43 , 67.03 , 57.30, 65.58 , 54.10 , 57.80, 69.93,  76.03,  68.16],
[86.40 , 67.20 , 73.76 , 67.16 , 78.75 , 77.58, 83.58 , 82.70 , 83.33, 73.63,  61.75,  60.93],
[99.35 , 98.31 , 93.50 , 98.68 , 99.67 , 99.46, 99.52 , 97.10 , 92.25, 91.10,   98.0,   92.33],
[99.15 , 97.77 , 85.02 , 99.56 , 99.46 , 99.56, 99.66 , 99.70 , 96.10, 95.96,  96.30,  88.50],
[97.44 , 79.21 , 74.11 , 32.20 , 82.81 , 85.26, 84.40 , 90.20 , 65.20, 57.10,  64.40,  32.43],
[94.51 , 64.19 , 1.00 , 8.70 , 56.36 , 47.65, 58.18 ,   81.44 , 42.90, 79.33,  15.26,  28.93],
[99.84 , 98.76 , 79.15 , 99.47 , 99.75 , 99.69, 99.78 , 90.00 , 56.00, 98.00,  99.00,  91.36]
]
avg_30 = np.mean(avg_30,axis=0)


syn_10=[
[99.96 , 99.93 , 24.98 , 76.60 , 29.09 , 24.12, 25.02 , 98.40 , 70.30, 94.40, 97.70, 98.00],
[88.93 , 85.41 , 25.01 , 31.81 , 11.06 , 11.44, 7.78 ,  80.70 , 24.70, 81.20, 55.10, 83.00],
[93.58 , 93.98 , 88.61 , 94.64 , 94.36 , 93.23, 95.55 , 92.90 , 68.90, 93.40, 95.10, 92.90],
[99.61 , 95.31 , 95.70 , 95.65 , 95.65 , 95.59, 95.66 , 95.70 , 95.60, 95.90, 95.50, 97.00]
]
syn_10 = np.mean(syn_10,axis=0)

syn_15=[
[99.90 , 99.88 , 24.99 , 52.69 , 27.61 , 25.51 , 24.14 , 93.90 , 45.40,  92.66, 82.53, 96.60 ],
[88.45 , 80.60 , 24.99 , 25.02 , 13.18 , 16.66 , 3.79 , 82.00 ,  22.40,  78.66, 45.00, 77.00 ],
[93.80 , 93.79 , 88.00 , 93.00 , 92.70 , 91.07 , 94.72 , 92.90 , 64.50,  93.06, 94.93, 92.60 ],
[99.61 , 95.31 , 95.71 , 95.72 , 95.69 , 95.63 , 95.64 , 95.60 , 95.60,  96.00, 95.20,  95.06]
]
syn_15 = np.mean(syn_15,axis=0)

syn_20=[
[99.90 , 99.77 , 24.98 , 38.26 , 27.61 , 25.04 , 14.28 , 99.80 , 45.30, 90.00, 59.00,  94.85],
[88.78 , 75.55 , 25.00 , 25.02 , 12.95 , 15.22 , 7.32 , 68.88 , 17.70, 73.80, 31.20,  69.20],
[93.79 , 93.74 , 87.13 , 94.18 , 91.22 , 88.88 , 93.81 , 92.00 , 62.30, 92.80, 94.25,  92.55],
[99.62 , 95.35 , 95.69 , 95.69 , 95.62 , 95.64 , 95.69 , 95.70 , 95.60, 95.85, 95.40,  93.60]
]
syn_20 = np.mean(syn_20,axis=0)

syn_25=[
[99.86 , 99.61 , 25.00 , 25.04 , 26.96 , 23.40 , 3.52 , 99.80 , 43.80,  88.96, 45.04, 92.76],
[88.20 , 68.98 , 25.00 , 25.05 , 15.61 , 17.69 , 7.32 , 72.23 , 14.70,  72.92, 29.28, 60.72],
[93.86 , 93.49 , 88.70 , 92.13 , 88.05 , 85.67 , 91.72 , 92.70 ,62.70,  92.40, 93.80, 92.40],
[99.62 , 95.21 , 95.72 , 95.67 , 95.63 , 95.64 , 95.65 , 95.60 , 95.60, 95.76, 95.20, 92.08]
]
syn_25 = np.mean(syn_25,axis=0)


syn_30=[
[99.86 , 99.32 , 25.01 , 24.97 , 25.29 , 21.48 , 1.09 , 99.70 , 45.70, 86.70, 49.66, 90.40],
[88.28 , 63.65 , 24.99 , 25.01 , 23.50 , 28.69 , 9.27 , 66.66 , 14.00, 69.60, 41.43, 51.23],
[93.41 , 93.11 , 78.40 , 88.60 , 84.63 , 83.33 , 92.11 , 92.22 ,65.40, 92.33, 93.20, 92.00],
[99.61 , 95.22 , 95.72 , 95.68 , 95.61 , 95.65 , 95.64 , 95.70 ,95.56, 95.83, 95.33, 91.16]
]
syn_30 = np.mean(syn_30,axis=0)

def natural():

    all_natural = np.vstack((avg_10, avg_15, avg_20, avg_25, avg_30)) / 100
    all_natural = all_natural.T

    all_syn = np.vstack((syn_10, syn_15, syn_20, syn_25, syn_30)) / 100
    all_syn = all_syn.T


    title_list = np.asarray(['Our', 'Client Stream', 'FedAvg', 'FedProx', 'U-Ensemble', 'PFNM', 'Decentralized','FedPer', 'pFedMe', 'DWM','ADWIN', 'LSNE'])

    x_values= [10,15,20,25,30]
    markers_on = [0, 1, 2, 3, 4]

    markers = ["o",'+',"p","P","h","*","D","x","^","3","4",'1','s']
    colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'coral']

    for ps in range(len(all_natural)):

        ax.plot(x_values, all_natural[ps], '-', markevery=markers_on, label=title_list[ps], marker=markers[ps],
                markersize=marker_size,
                fillstyle='none',
                markeredgewidth=2)



    #plt.ylim(0.20, 1.0)
    plt.xlim(10, max(x_values) + 0.5)
    plt.xticks(x_values, fontsize=xytick_font_size + 1)
    plt.yticks([0.1,  0.55, 1.0], fontsize=xytick_font_size + 1)
    plt.ylabel(y_ticks_label, fontsize=xytick_font_size)
    plt.xlabel(x_ticks_label, fontsize=xytick_font_size)


    plt.ylabel(x_ticks_label, fontsize=xytick_font_size)
    plt.xlabel(y_ticks_label, fontsize=xytick_font_size)

    plt.legend(prop={'size': xytick_font_size - 5.3}, handletextpad=0.2, bbox_to_anchor=(0, 1.02), loc="lower left",
               ncol=2, borderaxespad=0.)
    #plt.legend(prop={'size': xytick_font_size - 4}, ncol=1, handletextpad=0.1, loc='upper left', bbox_to_anchor=(1, 1))

    plt.savefig('../main_plots/natural_clients_v3.png',bbox_inches="tight")

    plt.show()



def elecFedPlot():


    cov_10 = [93.50,82.38,60.81,55.63,61.49,68.30,56.76,45.36,67.63,51.20,52.60]
    cov_15 = [93.39,80.30,60.92,37.26,61.43,67.53,60.34,52.77,66.61,57.80,56.80]
    cov_20 = [93.30,78.31,61.76,40.46,61.27,67.51,59.30,46.15,66.29,49.00,57.00]
    cov_25 = [93.41,76.68,61.04,38.64,62.33,67.70,59.94,58.88,65.32,54.00,59.00]
    cov_30 = [93.21,75.87,61.66,42.43,61.80,67.03,57.30,56.38,65.58,54.10,57.80]
    all_cov = np.vstack((cov_10, cov_15, cov_20, cov_25, cov_30)) / 100
    all_cov = all_cov.T


    elect_10 = [83.60,63.50,79.53,80.05,83.95,81.61,81.61,83.51,83.32,83.10,82.90]
    eclec_15 = [83.35,64.20,78.93,71.86,83.14,80.20,77.41,75.90,83.30,78.10,83.00]
    elect_20 = [84.17,64.10,75.16,81.31,81.88,80.09,75.44,75.50,83.03,79.60,83.33]
    elct_25 =  [83.75,64.63,73.59,69.19,81.86,79.06,77.44,83.36,83.38,77.80,83.33]
    elect_30 = [86.40,67.20,73.76,67.16,84.20,78.75,77.58,76.01,83.58,82.70,83.33]
    all__elect = np.vstack((elect_10, eclec_15, elect_20, elct_25, elect_30)) / 100
    all__elect = all__elect.T

    title_list = np.asarray(['Our', ' Client Stream', 'FedAvg', 'FedProx', 'U-Ensemble', 'PFNM', 'Decentralized','FedPer', 'pFedMe','DWM','ADWIN','LSNE'])

    x_values= [10,15,20,25,30]
    markers_on = [0, 1, 2, 3, 4]

    markers = ["o", '+', "p", "P", "h", "*", "D", "x", "^", "3", "4", '1', 's']
    colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'coral']

    print(all_cov)

    for ps in range(len(all_cov)):

        ax.plot(x_values, all__elect[ps], '-', markevery=markers_on, label=title_list[ps], marker=markers[ps],
                markersize=marker_size,
                fillstyle='none',
                markeredgewidth=2)



    #plt.ylim(0.20, 1.0)
    plt.xlim(10, max(x_values) + 0.5)
    plt.xticks(x_values, fontsize=xytick_font_size + 1)
    plt.yticks([0.2,  0.5, 1.0], fontsize=xytick_font_size + 1)
    plt.ylabel(y_ticks_label, fontsize=xytick_font_size)
    plt.xlabel(x_ticks_label, fontsize=xytick_font_size)
    plt.ylabel(x_ticks_label, fontsize=xytick_font_size)
    plt.xlabel(y_ticks_label, fontsize=xytick_font_size)

    plt.legend(prop={'size': xytick_font_size - 6}, ncol=1, handletextpad=0.1, loc='upper left', bbox_to_anchor=(1, 1))
    plt.savefig('../main_plots/artificial_client.png', bbox_inches="tight")

    plt.show()




if __name__ == "__main__":
    natural()


